name: 'Build and deploy'

on:
  push:
    branches:
      - master
      - staging
  pull_request:
    types: [ opened,synchronize ]

jobs:

  build:
    name: 'Build'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Deduce STATS_URL
        if: github.event_name == 'pull_request'
        run: echo "STATS_URL=${GITHUB_HEAD_REF}-stats.theo.dev" >> $GITHUB_ENV

      - name: Deduce STATS_URL
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: echo "STATS_URL=stats.theo.dev" >> $GITHUB_ENV

      - name: Deduce STATS_URL
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/staging'
        run: echo "STATS_URL=staging-stats.theo.dev" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Transpile
        run: yarn transpile

      - name: Build site
        run: make build
        working-directory: site

      - name: Build lambdas
        run: make build
        working-directory: stats/lambdas

      - uses: actions/upload-artifact@v2
        with:
          name: stats
          path: deploy/dist/stats

      - uses: actions/upload-artifact@v2
        with:
          name: site
          path: deploy/dist/site

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: [ build ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Extract branch name
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV

      - name: Extract branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - uses: actions/download-artifact@v2
        with:
          name: stats
          path: deploy/dist/stats

      - uses: actions/download-artifact@v2
        with:
          name: site
          path: deploy/dist/site

      - name: Terraform Init
        run: terraform init
        working-directory: deploy/instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy
        run: make apply branch=$BRANCH_NAME
        working-directory: deploy/instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  invalidate:
    name: 'Invalidate'
    runs-on: ubuntu-latest
    needs: [ deploy ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: deploy/instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Distribute
        run: make invalidate
        working-directory: deploy/instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
