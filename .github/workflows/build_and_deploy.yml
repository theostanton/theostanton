name: 'Build and deploy'

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened,synchronize ]

jobs:

  #  build:
  #    name: 'Build'
  #    runs-on: ubuntu-latest
  #
  #    defaults:
  #      run:
  #        shell: bash
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #
  #      - name: Get yarn cache directory path
  #        id: yarn-cache-dir-path
  #        run: echo "::set-output name=dir::$(yarn cache dir)"
  #
  #      - uses: actions/cache@v2
  #        id: yarn-cache
  #        with:
  #          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #          restore-keys: |
  #            ${{ runner.os }}-yarn-
  #
  #      - name: Install dependencies
  #        run: yarn
  #        working-directory: site
  #
  #      - name: Build site
  #        run: make build
  #        working-directory: site
  #
  #      - uses: actions/upload-artifact@v2
  #        with:
  #          name: dist
  #          path: dist/
  #
  #  deploy:
  #    name: 'Deploy'
  #    runs-on: ubuntu-latest
  #    needs: [ build ]
  #
  #    defaults:
  #      run:
  #        shell: bash
  #
  #    outputs:
  #      output: ${{ steps.set_output.outputs.outputs }}
  #
  #    steps:
  #      - name: Print branch name
  #        if: github.event_name == 'pull_request'
  #        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
  #
  #      - name: Extract branch name
  #        if: github.event_name != 'pull_request'
  #        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
  #
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #
  #      - name: Setup Terraform
  #        uses: hashicorp/setup-terraform@v1
  #
  #      - uses: actions/download-artifact@v2
  #        with:
  #          name: dist
  #
  #      - name: Terraform Init
  #        run: terraform init
  #        working-directory: deploy
  #        env:
  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #
  #      - name: Deploy
  #        run: make apply branch=$BRANCH_NAME
  #        working-directory: deploy
  #        env:
  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    name: 'Prep'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    outputs:
      output: ${{ steps.set_output.outputs.outputs }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set output
        id: set_output
        run: |
          echo ::set-output name=outputs::$(echo "1234")
        working-directory: deploy

  invalidate:
    name: 'Invalidate'
    runs-on: ubuntu-latest
    needs: [ deploy ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Print
        run: echo "DISTRIBUTION_ID = $DISTRIBUTION_ID"
        working-directory: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION_ID: ${{fromJSON( needs.deploy.outputs.output).distribution_id.value }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Distribute
        run: make invalidate distribution_id=${{fromJSON(needs.deploy.outputs.output).distribution_id.value}}
        working-directory: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION_ID: ${{fromJSON( needs.deploy.outputs.output).distribution_id.value }}
